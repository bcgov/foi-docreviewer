diff --git a/api/reviewer_api/auth.py b/api/reviewer_api/auth.py
index c0e4489..7764cae 100644
--- a/api/reviewer_api/auth.py
+++ b/api/reviewer_api/auth.py
@@ -68,24 +68,25 @@ class Auth:
         def decorated(f):
             @wraps(f)
             def wrapper(*args, **kwargs):
-                _groups = groups.split(",")
-                token = jwt.get_token_auth_header()
-                unverified_claims = josejwt.get_unverified_claims(token)
-                usergroups = unverified_claims["groups"]
-                usergroups = [
-                    usergroup.replace("/", "", 1)
-                    if usergroup.startswith("/")
-                    else usergroup
-                    for usergroup in usergroups
-                ]
-                exists = False
-                for group in _groups:
-                    if group in usergroups:
-                        exists = True
-                retval = "Unauthorized", 401
-                if exists == True:
-                    return f(*args, **kwargs)
-                return retval
+                # _groups = groups.split(",")
+                # token = jwt.get_token_auth_header()
+                # unverified_claims = josejwt.get_unverified_claims(token)
+                # usergroups = unverified_claims["groups"]
+                # usergroups = [
+                #     usergroup.replace("/", "", 1)
+                #     if usergroup.startswith("/")
+                #     else usergroup
+                #     for usergroup in usergroups
+                # ]
+                # exists = False
+                # for group in _groups:
+                #     if group in usergroups:
+                #         exists = True
+                # retval = "Unauthorized", 401
+                # if exists == True:
+                #     return f(*args, **kwargs)
+                # return retval
+                return f(*args, **kwargs)
 
             return wrapper
 
@@ -99,24 +100,25 @@ class AuthHelper:
     @classmethod
     def getuserid(cls, token=None):
         try:
-            if token is None:
-                token = request.headers.get("Authorization", None)
-            unverified_claims = josejwt.get_unverified_claims(
-                token.partition("Bearer")[2].strip()
-            )
-            print("********** unverified_claims ***********")
-            print(unverified_claims)
-            claim_name = (
-                "foi_preferred_username"
-                if "foi_preferred_username" in unverified_claims
-                else "preferred_username"
-            )
-            claim_value = unverified_claims[claim_name].lower()
-            return (
-                claim_value + "@idir"
-                if claim_value.endswith("@idir") == False
-                else claim_value
-            )
+            # if token is None:
+            #     token = request.headers.get("Authorization", None)
+            # unverified_claims = josejwt.get_unverified_claims(
+            #     token.partition("Bearer")[2].strip()
+            # )
+            # print("********** unverified_claims ***********")
+            # print(unverified_claims)
+            # claim_name = (
+            #     "foi_preferred_username"
+            #     if "foi_preferred_username" in unverified_claims
+            #     else "preferred_username"
+            # )
+            # claim_value = unverified_claims[claim_name].lower()
+            # return (
+            #     claim_value + "@idir"
+            #     if claim_value.endswith("@idir") == False
+            #     else claim_value
+            # )
+            return 'RICHAQI@idir'
 
         except JWTError as exception:
             print("JWTError >>> ", str(exception))
@@ -125,112 +127,122 @@ class AuthHelper:
 
     @classmethod
     def getwsuserid(cls, token):
-        unverified_claims = josejwt.get_unverified_claims(token.strip())
-        return unverified_claims["preferred_username"]
+        # unverified_claims = josejwt.get_unverified_claims(token.strip())
+        # return unverified_claims["preferred_username"]
+        return 'Richard Qi'
 
     @classmethod
     def getusername(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(
-            token.partition("Bearer")[2].strip()
-        )
-        return unverified_claims["name"]
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(
+        #     token.partition("Bearer")[2].strip()
+        # )
+        # return unverified_claims["name"]
+        return 'Richard Qi'
 
     @classmethod
     def isministrymember(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(
-            set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())
-        )
-        if len(ministrygroups) > 0:
-            return True
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(
+        #     set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())
+        # )
+        # if len(ministrygroups) > 0:
+        #     return True
+        # return False
         return False
 
     @classmethod
     def isprocesingteammember(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(
-            set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())
-        )
-        if len(ministrygroups) > 0:
-            return False
-        else:
-            processinggroups = list(
-                set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list())
-            )
-            if len(processinggroups) > 0:
-                return True
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(
+        #     set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())
+        # )
+        # if len(ministrygroups) > 0:
+        #     return False
+        # else:
+        #     processinggroups = list(
+        #         set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list())
+        #     )
+        #     if len(processinggroups) > 0:
+        #         return True
+        # return False
         return False
 
     @classmethod
     def getusergroups(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(
-            token.partition("Bearer")[2].strip()
-        )
-        usergroups = unverified_claims["groups"]
-        usergroups = [
-            usergroup.replace("/", "", 1) if usergroup.startswith("/") else usergroup
-            for usergroup in usergroups
-        ]
-        return usergroups
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(
+        #     token.partition("Bearer")[2].strip()
+        # )
+        # usergroups = unverified_claims["groups"]
+        # usergroups = [
+        #     usergroup.replace("/", "", 1) if usergroup.startswith("/") else usergroup
+        #     for usergroup in usergroups
+        # ]
+        # return usergroups
+        return ['Flex Team', 'Intake Team']
 
     @classmethod
     def getusertype(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(
-            set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())
-        )
-        if len(ministrygroups) > 0:
-            return "ministry"
-        else:
-            iaogroups = list(
-                set(usergroups).intersection(IAOTeamWithKeycloackGroup.list())
-            )
-            if len(iaogroups) > 0:
-                return "iao"
-        return None
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(
+        #     set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())
+        # )
+        # if len(ministrygroups) > 0:
+        #     return "ministry"
+        # else:
+        #     iaogroups = list(
+        #         set(usergroups).intersection(IAOTeamWithKeycloackGroup.list())
+        #     )
+        #     if len(iaogroups) > 0:
+        #         return "iao"
+        # return None
+        return "iao"
 
     @classmethod
     def getiaotype(cls):
-        usergroups = cls.getusergroups()
-        _groups = set(usergroups)
-        if cls.isministrymember() == False:
-            processinggroups = list(
-                _groups.intersection(ProcessingTeamWithKeycloackGroup.list())
-            )
-            if len(processinggroups) > 0:
-                return "processing"
-            else:
-                if "Flex Team" in _groups:
-                    return "flex"
-                elif "Intake Team" in _groups:
-                    return "intake"
-                else:
-                    return None
-        else:
-            return None
+        # usergroups = cls.getusergroups()
+        # _groups = set(usergroups)
+        # if cls.isministrymember() == False:
+        #     processinggroups = list(
+        #         _groups.intersection(ProcessingTeamWithKeycloackGroup.list())
+        #     )
+        #     if len(processinggroups) > 0:
+        #         return "processing"
+        #     else:
+        #         if "Flex Team" in _groups:
+        #             return "flex"
+        #         elif "Intake Team" in _groups:
+        #             return "intake"
+        #         else:
+        #             return None
+        # else:
+        #     return None
+        return "intake"
 
     @classmethod
     def getministrygroups(cls):
-        usergroups = cls.getusergroups()
-        return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # usergroups = cls.getusergroups()
+        # return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        return ['EDU Ministry Team']
 
     @classmethod
     def getfirstname(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(
-            token.partition("Bearer")[2].strip()
-        )
-        return unverified_claims["given_name"]
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(
+        #     token.partition("Bearer")[2].strip()
+        # )
+        # return unverified_claims["given_name"]
+        return 'Richard'
 
     @classmethod
     def getlastname(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(
-            token.partition("Bearer")[2].strip()
-        )
-        return unverified_claims["family_name"]
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(
+        #     token.partition("Bearer")[2].strip()
+        # )
+        # return unverified_claims["family_name"]
+        return 'Qi'
 
     @classmethod
     def getuserinfo(cls):
diff --git a/api/reviewer_api/resources/document.py b/api/reviewer_api/resources/document.py
index 19f41de..dff486f 100644
--- a/api/reviewer_api/resources/document.py
+++ b/api/reviewer_api/resources/document.py
@@ -42,8 +42,8 @@ class DeleteDocuments(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def post():
         try:
             payload = request.get_json()
@@ -63,8 +63,8 @@ class UpdateDocumentAttributes(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def post():
         try:
             payload = request.get_json()
@@ -84,22 +84,22 @@ class GetDocuments(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    #@auth.require
+    #@auth.ismemberofgroups(getrequiredmemberships())
     def get(requestid):
         try:
-            response = requests.request(
-                method='GET',
-                url= requestapiurl + "/api/foirequests/ministryrequestid/" + requestid + "/" + AuthHelper.getusertype(),
-                headers={'Authorization': AuthHelper.getauthtoken(), 'Content-Type': 'application/json'},
-                timeout=float(requestapitimeout)
-            )
-            response.raise_for_status()
-            # get request status
-            jsonObj = response.json()
+            # response = requests.request(
+            #     method='GET',
+            #     url= requestapiurl + "/api/foirequests/ministryrequestid/" + requestid + "/" + AuthHelper.getusertype(),
+            #     headers={'Authorization': AuthHelper.getauthtoken(), 'Content-Type': 'application/json'},
+            #     timeout=float(requestapitimeout)
+            # )
+            # response.raise_for_status()
+            # # get request status
+            # jsonObj = response.json()
 
             result = documentservice().getdocuments(requestid)
-            return json.dumps({"requeststatusid": jsonObj["requeststatusid"], "documents": result}), 200
+            return json.dumps({"requeststatusid": 11, "documents": result}), 200
         except KeyError as err:
             return {'status': False, 'message':err.messages}, 400
         except BusinessException as exception:
diff --git a/api/reviewer_api/resources/documentpageflag.py b/api/reviewer_api/resources/documentpageflag.py
index 05dcc08..dd98a3b 100644
--- a/api/reviewer_api/resources/documentpageflag.py
+++ b/api/reviewer_api/resources/documentpageflag.py
@@ -40,8 +40,8 @@ class SaveDocumentPageflag(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def post(requestid):
         try:
             payload = BulkDocumentPageflagSchema().load(request.get_json())
@@ -61,8 +61,8 @@ class GetDocumentPageflag(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get(requestid, documentid, documentversion, redactionlayerid):
         try:
             result = documentpageflagservice().getdocumentpageflags(requestid,redactionlayerid, documentid, documentversion)
@@ -81,8 +81,8 @@ class GetDocumentPageflag(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get(requestid, redactionlayerid):
         try:
             result = documentpageflagservice().getpageflags(requestid, redactionlayerid)
diff --git a/api/reviewer_api/resources/foiflowmasterdata.py b/api/reviewer_api/resources/foiflowmasterdata.py
index e2ce5a7..ef79052 100644
--- a/api/reviewer_api/resources/foiflowmasterdata.py
+++ b/api/reviewer_api/resources/foiflowmasterdata.py
@@ -53,8 +53,8 @@ class FOIFlowS3Presigned(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    #@auth.require
+    #@auth.ismemberofgroups(getrequiredmemberships())
     def get(documentid):
         try:
             document = documentservice().getdocument(documentid)
diff --git a/api/reviewer_api/resources/keyword.py b/api/reviewer_api/resources/keyword.py
index 563cf54..51f4d8f 100644
--- a/api/reviewer_api/resources/keyword.py
+++ b/api/reviewer_api/resources/keyword.py
@@ -33,8 +33,8 @@ class GetSections(Resource):
     """
     @staticmethod
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get():
         try:
             data = keywordservice().getallkeywords()
diff --git a/api/reviewer_api/resources/pageflag.py b/api/reviewer_api/resources/pageflag.py
index bb34bc4..b29025a 100644
--- a/api/reviewer_api/resources/pageflag.py
+++ b/api/reviewer_api/resources/pageflag.py
@@ -33,8 +33,8 @@ class GetSections(Resource):
     """
     @staticmethod
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    #@auth.require
+    #@auth.ismemberofgroups(getrequiredmemberships())
     def get():
         try:
             data = pageflagservice().getpageflags()
@@ -50,8 +50,8 @@ class GetSections(Resource):
     """
     @staticmethod
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get(requestid):
         try:
             data = pageflagservice().getpageflag_by_request(requestid)
diff --git a/api/reviewer_api/resources/redaction.py b/api/reviewer_api/resources/redaction.py
index 08348c0..d8fa4e4 100644
--- a/api/reviewer_api/resources/redaction.py
+++ b/api/reviewer_api/resources/redaction.py
@@ -55,8 +55,8 @@ class Annotations(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get(ministryrequestid, redactionlayer="redline"):
         try:
             isvalid, _redactionlayer = redactionservice().validateredactionlayer(
@@ -81,7 +81,7 @@ class SaveAnnotations(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def post():
         try:
             requestjson = request.get_json()
@@ -115,7 +115,7 @@ class DeactivateAnnotations(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def delete(
         requestid,
         documentid,
@@ -156,7 +156,7 @@ class DeactivateRedactions(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def delete(
         requestid, documentid, documentversion, annotationname, redactionlayerid, page
     ):
@@ -189,7 +189,7 @@ class AnnotationMetadata(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def get(ministryrequestid):
         try:
             result = redactionservice().getannotationinfobyrequest(ministryrequestid)
@@ -208,7 +208,7 @@ class GetSections(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def get(ministryrequestid):
         try:
             data = annotationservice().getredactedsectionsbyrequest(ministryrequestid)
@@ -225,7 +225,7 @@ class GetAccount(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def get():
         if AuthHelper.getusertype() == "ministry":
             usergroups = AuthHelper.getministrygroups()
@@ -250,7 +250,7 @@ class SaveRedlines(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def post():
         try:
             requestjson = request.get_json()
diff --git a/api/reviewer_api/resources/redactionlayer.py b/api/reviewer_api/resources/redactionlayer.py
index e127cfe..0548af5 100644
--- a/api/reviewer_api/resources/redactionlayer.py
+++ b/api/reviewer_api/resources/redactionlayer.py
@@ -33,8 +33,8 @@ class GetSections(Resource):
     """
     @staticmethod
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get(ministryrequestid):
         try:
             data = redactionlayerservice().getredactionlayers(ministryrequestid)
diff --git a/api/reviewer_api/resources/section.py b/api/reviewer_api/resources/section.py
index ef584c4..6654e82 100644
--- a/api/reviewer_api/resources/section.py
+++ b/api/reviewer_api/resources/section.py
@@ -36,8 +36,8 @@ class GetSections(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
-    @auth.ismemberofgroups(getrequiredmemberships())
+    # @auth.require
+    # @auth.ismemberofgroups(getrequiredmemberships())
     def get():
         try:
             data = sectionservice().getsections()
@@ -54,7 +54,7 @@ class GetSections(Resource):
     @staticmethod
     @TRACER.trace()
     @cross_origin(origins=allowedorigins())
-    @auth.require
+    # @auth.require
     def get(ministryrequestid):
         try:
             data = sectionservice().getsections_by_ministryid(ministryrequestid)
diff --git a/debug_local.patch b/debug_local.patch
index 1e5f47e..ff4fa5a 100644
--- a/debug_local.patch
+++ b/debug_local.patch
@@ -1,278 +0,0 @@
-diff --git a/api/reviewer_api/auth.py b/api/reviewer_api/auth.py
-index cdda225..eff7423 100644
---- a/api/reviewer_api/auth.py
-+++ b/api/reviewer_api/auth.py
-@@ -31,11 +31,11 @@ class Auth:
-     def require(cls, f):
-         """Validate the Bearer Token."""
- 
--        @jwt.requires_auth
-+        # @jwt.requires_auth
-         @wraps(f)
-         def decorated(*args, **kwargs):
--            g.authorization_header = request.headers.get("Authorization", None)
--            g.token_info = g.jwt_oidc_token_info
-+            # g.authorization_header = request.headers.get("Authorization", None)
-+            # g.token_info = g.jwt_oidc_token_info
-             return f(*args, **kwargs)
- 
-         return decorated
-@@ -63,120 +63,127 @@ class Auth:
-             #@Auth.require
-             @wraps(f)
-             def wrapper(*args, **kwargs):
--                _groups = groups.split(',')
--                token = jwt.get_token_auth_header()
--                unverified_claims = josejwt.get_unverified_claims(token)
--                usergroups = unverified_claims['groups']
--                usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
--                exists = False
--                for group in _groups:
--                    if group in usergroups: 
--                       exists = True
--                retval = "Unauthorized" , 401
--                if exists == True:            
--                    return f(*args, **kwargs)
--                return retval
-+                # _groups = groups.split(',')
-+                # token = jwt.get_token_auth_header()
-+                # unverified_claims = josejwt.get_unverified_claims(token)
-+                # usergroups = unverified_claims['groups']
-+                # usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
-+                # exists = False
-+                # for group in _groups:
-+                #     if group in usergroups:
-+                #        exists = True
-+                # retval = "Unauthorized" , 401
-+                # if exists == True:
-+                #     return f(*args, **kwargs)
-+                # return retval
-+                return f(*args, **kwargs)
- 
-             return wrapper
- 
-         return decorated
--    
-+
- auth = (
-     Auth()
- )
- 
- 
- class AuthHelper:
--    
-+
-     @classmethod
-     def getuserid(cls):
--        token = request.headers.get("Authorization", None)
--        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
--        return unverified_claims['preferred_username']
-+        # token = request.headers.get("Authorization", None)
-+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-+        # if 'identity_provider' in unverified_claims and unverified_claims['identity_provider'] == "idir":
-+        #     claim_name = 'foi_preferred_username' if "foi_preferred_username" in unverified_claims else 'preferred_username'
-+        #     claim_value = unverified_claims[claim_name].lower()
-+        #     return claim_value+'@idir' if claim_value.endswith("@idir") == False else claim_value
-+        # return unverified_claims['preferred_username']
-+        return 'RICHAQI@idir'
-     
--    @classmethod
--    def getwsuserid(cls, token):
--        unverified_claims = josejwt.get_unverified_claims(token.strip())
--        return unverified_claims['preferred_username']
--
-     @classmethod
-     def getusername(cls):
--        token = request.headers.get("Authorization", None)
--        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
--        return unverified_claims['name']
--    
-+        # token = request.headers.get("Authorization", None)
-+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-+        # return unverified_claims['name']
-+        return 'Richard Qi'
-+
-     @classmethod
-     def isministrymember(cls):
--        usergroups = cls.getusergroups()
--        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
--        if len(ministrygroups) > 0:
--            return True
-+        # usergroups = cls.getusergroups()
-+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-+        # if len(ministrygroups) > 0:
-+        #     return True
-         return False
--    
-+
-     @classmethod
-     def isprocesingteammember(cls):
--        usergroups = cls.getusergroups()
--        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
--        if len(ministrygroups) > 0:
--            return False
--        else:
--            processinggroups = list(set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list()))
--            if len(processinggroups) > 0:
--                return True
-+        # usergroups = cls.getusergroups()
-+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-+        # if len(ministrygroups) > 0:
-+        #     return False
-+        # else:
-+        #     processinggroups = list(set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list()))
-+        #     if len(processinggroups) > 0:
-+        #         return True
-         return False
- 
-     @classmethod
-     def getusergroups(cls):
--        token = request.headers.get("Authorization", None)
--        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
--        usergroups = unverified_claims['groups']
--        usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
--        return usergroups
--    
-+        # token = request.headers.get("Authorization", None)
-+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-+        # usergroups = unverified_claims['groups']
-+        # usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
-+        # return usergroups
-+        return ['Flex Team', 'Intake Team']
-+        # return ['EDU Ministry Team']
-+
-     @classmethod
-     def getusertype(cls):
--        usergroups = cls.getusergroups()
--        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
--        if len(ministrygroups) > 0:
--            return "ministry"
--        else:
--            iaogroups = list(set(usergroups).intersection(IAOTeamWithKeycloackGroup.list()))
--            if len(iaogroups) > 0:
--                return "iao"
--        return None
-+        # usergroups = cls.getusergroups()
-+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-+        # if len(ministrygroups) > 0:
-+        #     return "ministry"
-+        # else:
-+        #     iaogroups = list(set(usergroups).intersection(IAOTeamWithKeycloackGroup.list()))
-+        #     if len(iaogroups) > 0:
-+        #         return "iao"
-+        # return None
-+        return "iao"
- 
-     @classmethod
-     def getiaotype(cls):
--        usergroups = cls.getusergroups()
--        _groups = set(usergroups)
--        if cls.isministrymember() == False:
--            processinggroups = list(_groups.intersection(ProcessingTeamWithKeycloackGroup.list()))
--            if len(processinggroups) > 0:
--                return "processing"
--            else:
--                if 'Flex Team' in _groups:
--                    return "flex"
--                elif 'Intake Team' in _groups:
--                    return "intake"
--                else:
--                    return None
--        else:
--            return None
-+        # usergroups = cls.getusergroups()
-+        # _groups = set(usergroups)
-+        # if cls.isministrymember() == False:
-+        #     processinggroups = list(_groups.intersection(ProcessingTeamWithKeycloackGroup.list()))
-+        #     if len(processinggroups) > 0:
-+        #         return "processing"
-+        #     else:
-+        #         if 'Flex Team' in _groups:
-+        #             return "flex"
-+        #         elif 'Intake Team' in _groups:
-+        #             return "intake"
-+        #         else:
-+        #             return None
-+        # else:
-+        #     return None
-+        return "intake"
- 
-     @classmethod
-     def getministrygroups(cls):
--        usergroups = cls.getusergroups()
--        return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-+        # usergroups = cls.getusergroups()
-+        # return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-+        return ['EDU Ministry Team']
- 
-     @classmethod
-     def getfirstname(cls):
--        token = request.headers.get("Authorization", None)
--        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
--        return unverified_claims['given_name']
--
-+        # token = request.headers.get("Authorization", None)
-+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-+        # return unverified_claims['given_name']
-+        return 'Richard'
-     @classmethod
-     def getlastname(cls):
--        token = request.headers.get("Authorization", None)
--        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
--        return unverified_claims['family_name']
--        
-\ No newline at end of file
-+        # token = request.headers.get("Authorization", None)
-+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-+        # return unverified_claims['family_name']
-+        return 'Qi'
-diff --git a/web/src/components/FOI/PrivateRoute.tsx b/web/src/components/FOI/PrivateRoute.tsx
-index 67c0590..7b44510 100644
---- a/web/src/components/FOI/PrivateRoute.tsx
-+++ b/web/src/components/FOI/PrivateRoute.tsx
-@@ -11,15 +11,16 @@ import Col from 'react-bootstrap/Col';
- 
- function PrivateRoute(props: any) {
-   const dispatch = useAppDispatch();
--  useEffect(() => {
--    if (props.store) {
--      UserService.initKeycloak(props.store, (_err: any, res: any) => {
--        dispatch(setUserAuth(res.authenticated));
--      });
--    }
--  }, [props.store, dispatch]);
-+  // useEffect(() => {
-+  //   if (props.store) {
-+  //     UserService.initKeycloak(props.store, (_err: any, res: any) => {
-+  //       dispatch(setUserAuth(res.authenticated));
-+  //     });
-+  //   }
-+  // }, [props.store, dispatch]);
- 
--  const isAuth = useAppSelector((state: any) => state.user.isAuthenticated);
-+  // const isAuth = useAppSelector((state: any) => state.user.isAuthenticated);
-+  const isAuth = true;
-   const userDetail = useAppSelector((state: any) => state.user.userDetail);
-   return (
-     <>
-diff --git a/web/src/modules/userDetailReducer.ts b/web/src/modules/userDetailReducer.ts
-index b7046a0..50dd316 100644
---- a/web/src/modules/userDetailReducer.ts
-+++ b/web/src/modules/userDetailReducer.ts
-@@ -4,10 +4,13 @@ import { encrypt } from "../helper/helper";
- const initialState = {
-   bearerToken: '',
-   roles: '',
--  userDetail: {},
--  isAuthenticated: false,
-+  // userDetail: {},
-+  // isAuthenticated: false,
-+  userDetail:{preferred_username:"RICHAQI@idir",family_name:"Q",given_name:"Rich",groups:["/Intake Team"]},
-+  isAuthenticated:true,
-   currentPage: '',
--  isAuthorized: false,
-+  // isAuthorized: false,
-+  isAuthorized: true,
- }
- 
- 
diff --git a/web/src/components/FOI/PrivateRoute.tsx b/web/src/components/FOI/PrivateRoute.tsx
index ed53594..6cd4ca5 100644
--- a/web/src/components/FOI/PrivateRoute.tsx
+++ b/web/src/components/FOI/PrivateRoute.tsx
@@ -14,15 +14,16 @@ import "react-toastify/dist/ReactToastify.css";
 
 function PrivateRoute(props: any) {
   const dispatch = useAppDispatch();
-  useEffect(() => {
-    if (props.store) {
-      UserService.initKeycloak(props.store, (_err: any, res: any) => {
-        dispatch(setUserAuth(res.authenticated));
-      });
-    }
-  }, [props.store, dispatch]);
+  // useEffect(() => {
+  //   if (props.store) {
+  //     UserService.initKeycloak(props.store, (_err: any, res: any) => {
+  //       dispatch(setUserAuth(res.authenticated));
+  //     });
+  //   }
+  // }, [props.store, dispatch]);
 
-  const isAuth = useAppSelector((state: any) => state.user.isAuthenticated);
+  //const isAuth = useAppSelector((state: any) => state.user.isAuthenticated);
+  const isAuth = true;
   const userDetail = useAppSelector((state: any) => state.user.userDetail);
   return (
     <>
diff --git a/web/src/modules/userDetailReducer.ts b/web/src/modules/userDetailReducer.ts
index b7046a0..5550f2f 100644
--- a/web/src/modules/userDetailReducer.ts
+++ b/web/src/modules/userDetailReducer.ts
@@ -4,10 +4,10 @@ import { encrypt } from "../helper/helper";
 const initialState = {
   bearerToken: '',
   roles: '',
-  userDetail: {},
-  isAuthenticated: false,
+  userDetail:{preferred_username:"RICHAQI@idir",family_name:"Q",given_name:"Rich",groups:["/Intake Team"]},
+  isAuthenticated: true,
   currentPage: '',
-  isAuthorized: false,
+  isAuthorized: true,
 }
 
 

diff --git a/api/reviewer_api/auth.py b/api/reviewer_api/auth.py
index cdda225..eff7423 100644
--- a/api/reviewer_api/auth.py
+++ b/api/reviewer_api/auth.py
@@ -31,11 +31,11 @@ class Auth:
     def require(cls, f):
         """Validate the Bearer Token."""
 
-        @jwt.requires_auth
+        # @jwt.requires_auth
         @wraps(f)
         def decorated(*args, **kwargs):
-            g.authorization_header = request.headers.get("Authorization", None)
-            g.token_info = g.jwt_oidc_token_info
+            # g.authorization_header = request.headers.get("Authorization", None)
+            # g.token_info = g.jwt_oidc_token_info
             return f(*args, **kwargs)
 
         return decorated
@@ -63,120 +63,127 @@ class Auth:
             #@Auth.require
             @wraps(f)
             def wrapper(*args, **kwargs):
-                _groups = groups.split(',')
-                token = jwt.get_token_auth_header()
-                unverified_claims = josejwt.get_unverified_claims(token)
-                usergroups = unverified_claims['groups']
-                usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
-                exists = False
-                for group in _groups:
-                    if group in usergroups: 
-                       exists = True
-                retval = "Unauthorized" , 401
-                if exists == True:            
-                    return f(*args, **kwargs)
-                return retval
+                # _groups = groups.split(',')
+                # token = jwt.get_token_auth_header()
+                # unverified_claims = josejwt.get_unverified_claims(token)
+                # usergroups = unverified_claims['groups']
+                # usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
+                # exists = False
+                # for group in _groups:
+                #     if group in usergroups:
+                #        exists = True
+                # retval = "Unauthorized" , 401
+                # if exists == True:
+                #     return f(*args, **kwargs)
+                # return retval
+                return f(*args, **kwargs)
 
             return wrapper
 
         return decorated
-    
+
 auth = (
     Auth()
 )
 
 
 class AuthHelper:
-    
+
     @classmethod
     def getuserid(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        return unverified_claims['preferred_username']
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # if 'identity_provider' in unverified_claims and unverified_claims['identity_provider'] == "idir":
+        #     claim_name = 'foi_preferred_username' if "foi_preferred_username" in unverified_claims else 'preferred_username'
+        #     claim_value = unverified_claims[claim_name].lower()
+        #     return claim_value+'@idir' if claim_value.endswith("@idir") == False else claim_value
+        # return unverified_claims['preferred_username']
+        return 'RICHAQI@idir'
     
-    @classmethod
-    def getwsuserid(cls, token):
-        unverified_claims = josejwt.get_unverified_claims(token.strip())
-        return unverified_claims['preferred_username']
-
     @classmethod
     def getusername(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        return unverified_claims['name']
-    
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # return unverified_claims['name']
+        return 'Richard Qi'
+
     @classmethod
     def isministrymember(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-        if len(ministrygroups) > 0:
-            return True
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # if len(ministrygroups) > 0:
+        #     return True
         return False
-    
+
     @classmethod
     def isprocesingteammember(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-        if len(ministrygroups) > 0:
-            return False
-        else:
-            processinggroups = list(set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list()))
-            if len(processinggroups) > 0:
-                return True
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # if len(ministrygroups) > 0:
+        #     return False
+        # else:
+        #     processinggroups = list(set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list()))
+        #     if len(processinggroups) > 0:
+        #         return True
         return False
 
     @classmethod
     def getusergroups(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        usergroups = unverified_claims['groups']
-        usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
-        return usergroups
-    
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # usergroups = unverified_claims['groups']
+        # usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
+        # return usergroups
+        return ['Flex Team', 'Intake Team']
+        # return ['EDU Ministry Team']
+
     @classmethod
     def getusertype(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
-        if len(ministrygroups) > 0:
-            return "ministry"
-        else:
-            iaogroups = list(set(usergroups).intersection(IAOTeamWithKeycloackGroup.list()))
-            if len(iaogroups) > 0:
-                return "iao"
-        return None
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # if len(ministrygroups) > 0:
+        #     return "ministry"
+        # else:
+        #     iaogroups = list(set(usergroups).intersection(IAOTeamWithKeycloackGroup.list()))
+        #     if len(iaogroups) > 0:
+        #         return "iao"
+        # return None
+        return "iao"
 
     @classmethod
     def getiaotype(cls):
-        usergroups = cls.getusergroups()
-        _groups = set(usergroups)
-        if cls.isministrymember() == False:
-            processinggroups = list(_groups.intersection(ProcessingTeamWithKeycloackGroup.list()))
-            if len(processinggroups) > 0:
-                return "processing"
-            else:
-                if 'Flex Team' in _groups:
-                    return "flex"
-                elif 'Intake Team' in _groups:
-                    return "intake"
-                else:
-                    return None
-        else:
-            return None
+        # usergroups = cls.getusergroups()
+        # _groups = set(usergroups)
+        # if cls.isministrymember() == False:
+        #     processinggroups = list(_groups.intersection(ProcessingTeamWithKeycloackGroup.list()))
+        #     if len(processinggroups) > 0:
+        #         return "processing"
+        #     else:
+        #         if 'Flex Team' in _groups:
+        #             return "flex"
+        #         elif 'Intake Team' in _groups:
+        #             return "intake"
+        #         else:
+        #             return None
+        # else:
+        #     return None
+        return "intake"
 
     @classmethod
     def getministrygroups(cls):
-        usergroups = cls.getusergroups()
-        return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # usergroups = cls.getusergroups()
+        # return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        return ['EDU Ministry Team']
 
     @classmethod
     def getfirstname(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        return unverified_claims['given_name']
-
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # return unverified_claims['given_name']
+        return 'Richard'
     @classmethod
     def getlastname(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        return unverified_claims['family_name']
-        
\ No newline at end of file
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # return unverified_claims['family_name']
+        return 'Qi'
diff --git a/web/src/components/FOI/PrivateRoute.tsx b/web/src/components/FOI/PrivateRoute.tsx
index 67c0590..7b44510 100644
--- a/web/src/components/FOI/PrivateRoute.tsx
+++ b/web/src/components/FOI/PrivateRoute.tsx
@@ -11,15 +11,16 @@ import Col from 'react-bootstrap/Col';
 
 function PrivateRoute(props: any) {
   const dispatch = useAppDispatch();
-  useEffect(() => {
-    if (props.store) {
-      UserService.initKeycloak(props.store, (_err: any, res: any) => {
-        dispatch(setUserAuth(res.authenticated));
-      });
-    }
-  }, [props.store, dispatch]);
+  // useEffect(() => {
+  //   if (props.store) {
+  //     UserService.initKeycloak(props.store, (_err: any, res: any) => {
+  //       dispatch(setUserAuth(res.authenticated));
+  //     });
+  //   }
+  // }, [props.store, dispatch]);
 
-  const isAuth = useAppSelector((state: any) => state.user.isAuthenticated);
+  // const isAuth = useAppSelector((state: any) => state.user.isAuthenticated);
+  const isAuth = true;
   const userDetail = useAppSelector((state: any) => state.user.userDetail);
   return (
     <>
diff --git a/web/src/modules/userDetailReducer.ts b/web/src/modules/userDetailReducer.ts
index b7046a0..50dd316 100644
--- a/web/src/modules/userDetailReducer.ts
+++ b/web/src/modules/userDetailReducer.ts
@@ -4,10 +4,13 @@ import { encrypt } from "../helper/helper";
 const initialState = {
   bearerToken: '',
   roles: '',
-  userDetail: {},
-  isAuthenticated: false,
+  // userDetail: {},
+  // isAuthenticated: false,
+  userDetail:{preferred_username:"RICHAQI@idir",family_name:"Q",given_name:"Rich",groups:["/Intake Team"]},
+  isAuthenticated:true,
   currentPage: '',
-  isAuthorized: false,
+  // isAuthorized: false,
+  isAuthorized: true,
 }
 
 

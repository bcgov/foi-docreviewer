---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: Deployment template for a adjudication api service.
    tags: "${API_NAME}"
  name: "${API_NAME}-deploy"
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    labels:
      app: "${API_NAME}"
      app-group: "${APP_GROUP}"
      template: "${API_NAME}-deploy"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
        # pre:
        #   failurePolicy: Abort
          # execNewPod:
            # command:
            # - "/bin/bash"
            # - "-c"
            # - "python manage.py db upgrade"
            # containerName: "${API_NAME}"
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${API_NAME}"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_NAMESPACE}"
          # name: "${API_NAME}:${TAG_NAME}"
          name: "${IMAGE_STREAM_NAME_FULL}"
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      app: "${API_NAME}"
      deploymentconfig: "${API_NAME}"
    template:
      metadata:
        labels:
          app: "${API_NAME}"
          app-group: "${APP_GROUP}"
          deploymentconfig: "${API_NAME}"
          template: "${API_NAME}-deploy"
          role: api
      spec:
        containers:
        - name: "${API_NAME}"
          image: "${API_NAME}"
          imagePullPolicy: Always
          env:
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "${DB_SECRETS}"
                  key: database-user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${DB_SECRETS}"
                  key: database-password
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: "${DB_SECRETS}"
                  key: database-name

            - name: DATABASE_HOST
              value: "${DATABASE_HOST}"
            - name: FLASK_ENV
              value: production


            - name: KEYCLOAK_ADMIN_HOST
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: KEYCLOAK_ADMIN_HOST
            - name: KEYCLOAK_ADMIN_REALM
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: KEYCLOAK_ADMIN_REALM
            - name: KEYCLOAK_ADMIN_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: KEYCLOAK_ADMIN_CLIENT_SECRET
            - name: KEYCLOAK_ADMIN_SRVPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: KEYCLOAK_ADMIN_SRVPASSWORD
            - name: KEYCLOAK_ADMIN_INTAKE_GROUPID
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: KEYCLOAK_ADMIN_INTAKE_GROUPID
            - name: JWT_OIDC_WELL_KNOWN_CONFIG
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: JWT_OIDC_WELL_KNOWN_CONFIG
            - name: JWT_OIDC_AUDIENCE
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: JWT_OIDC_AUDIENCE
            - name: JWT_OIDC_ISSUER
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: JWT_OIDC_ISSUER
            - name: JWT_OIDC_ALGORITHMS
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: JWT_OIDC_ALGORITHMS
            - name: CORS_ORIGIN
              value: "${CORS_ORIGIN}"
            - name: JWT_OIDC_CACHING_ENABLED
              value: 'True'
            - name: JWT_OIDC_JWKS_CACHE_TIMEOUT
              value: "300"
            - name: CACHE_TIMEOUT
              value: "36000"
            - name: CACHE_ENABLED
              value: 'Y'
            - name: OSS_S3_FORMS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: OSS_S3_FORMS_BUCKET
            - name: OSS_S3_FORMS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: OSS_S3_FORMS_ACCESS_KEY_ID
            - name: OSS_S3_FORMS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: OSS_S3_FORMS_SECRET_ACCESS_KEY
            - name: OSS_S3_HOST
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: OSS_S3_HOST
            - name: OSS_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: OSS_S3_REGION
            - name: OSS_S3_SERVICE
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: OSS_S3_SERVICE
            - name: CACHE_REDISURL
              valueFrom:
                secretKeyRef:
                  name: "${SECRETS}"
                  key: CACHE_REDISURL

          ## TODO: NEED TO GET CDOGS AND PAYBC ENVS IN HERE TOO
          ## TODO: NEED TO GET CDOGS AND PAYBC ENVS IN HERE TOOTODO: NEED TO GET CDOGS AND PAYBC ENVS IN HERE TOO
  
  
          # command:
          #   - gunicorn
          #   - '-b'
          #   - :5000
          #   - selfservice_api:create_app()
          ports:
          - containerPort: 5000
            protocol: TCP
          # envFrom:
          # - configMapRef:
          #     name: ${API_NAME}-config
          resources:
            requests:
              cpu: "50m"
              memory: "250Mi"
            limits:
              cpu: "150m"
              memory: "500Mi"
          readinessProbe:
            httpGet:
              path: /api/readyz
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 3
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 3          
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- kind: Service
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    creationTimestamp: 
    labels:
      app: "${API_NAME}"
      app-group: "${APP_GROUP}"
      template: "${API_NAME}-deploy"
  spec:
    ports:
    - name: 5000-tcp
      protocol: TCP
      port: 5000
      targetPort: 5000
    selector:
      deploymentconfig: "${API_NAME}"
    type: ClusterIP
    sessionAffinity: None
  # status:
  #   loadBalancer: {}
- kind: Route
  apiVersion: v1
  metadata:
    name: "${API_NAME}"
    labels:
      app: "${API_NAME}"
      app-group: "${APP_GROUP}"
      template: "${API_NAME}-deploy"
  spec:
    to:
      kind: Service
      name: "${API_NAME}"
      weight: 100
    port:
      targetPort: 5000-tcp
    tls:
      termination: edge
    wildcardPolicy: None
    host: "${TAG_NAME}-${API_NAME}.apps.silver.devops.gov.bc.ca"
parameters:
- name: API_NAME
  displayName: Name
  description: The name assigned to all of the OpenShift resources associated to the
    server instance.
  required: true
  value: reviewer-api
- name: APP_GROUP
  displayName: App Group
  description: The name assigned to all of the deployments in this project.
  required: true
  value: foi-docreviewer
- name: IMAGE_NAMESPACE
  displayName: Image Namespace
  required: true
  description: The namespace of the OpenShift project containing the imagestream for
    the application.
  value: d7abee-tools
- name: TAG_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod
  required: true
  value: dev
- name: DATABASE_HOST
  displayName: Database service name
  description: Must match service name of database, eg patroni-master-002
  required: true
  value: postgresql-docreviewer
- name: DB_SECRETS
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod
  required: true
  value: postgresql-docreviewer
- name: SECRETS
  displayName: Request Management Secrets
  description: Name of secret for all request-management-api values
  required: true
  value: docreviewer-secret

- name: IMAGE_STREAM_NAME_FULL
  displayName: Full image stream name (eg "reviewer-api:dev")
  description: Includes ImageStream name and tag
  required: true
  value: reviewer-api:dev
- name: CORS_ORIGIN
  displayName: CORS Origin whitelists
  description: Whitelist for CORS requests
  required: false
